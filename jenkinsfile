
pipeline {
    agent any
    environment {
        DOCKERHUB_PASSWORD = credentials('docker-hub-credentials')
        DOCKERHUB_REPO = 'shirannimni'
        DOCKERHUB_USERNAME = 'shirannimni'
        SUCCESS = '1'
    }
    stages {
        stage ('Clone repo') {
            steps {
                git branch: 'main', url: 'https://github.com/shirannimni/ecommerce-django-react.git'
            }
        }
        stage('Install Dependencies For Local Testing') {
            steps {
                sh 'sudo apt-get update'
                sh 'sudo apt-get install libjpeg-dev zlib1g-dev'
                sh '''
                sudo apt-get update
                sudo apt-get install -y wget unzip
                wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo apt install ./google-chrome-stable_current_amd64.deb -y
                google-chrome --version
                '''
                sh 'pip install -r requirements.txt'
                
            }
        }
        

        stage('Run Docker Containers') {
            steps {
                script {
                    sh '''
                    sudo docker rm -f django-db || true
                    sudo docker rm -f django-web || true

                    
                    sudo docker run -d --name django-db \
                        -p 5432:5432 \
                        ${DOCKERHUB_REPO}/django-db

                    
                    sudo docker run -d --name django-web \
                        -p 5000:5000 \
                        -e DATABASE_URL=postgres://postgres:example_password@django-db:5432/db_name \
                        ${DOCKERHUB_REPO}/django-web
                    '''
                }
            }
        }

        stage('Verify Communication') {
            steps {
                script {
                    sh '''
                    docker network inspect django-network || docker network create django-network
                    docker network connect django-network django-web
                    docker network connect django-network django-db
                    docker exec django-web ping -c 4 django-db
                    '''
                }
            }
        }

    
         stage('Run Tests') {
            steps {
                sh 'python3 manage.py runserver&'    
                  
                sh '''
                sudo /opt/google/chrome/chrome --headless --no-sandbox --disable-dev-shm-usage
                sudo chmod 1777 /tmp
                sudo chmod +rx /opt/google/chrome/chrome
                wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo apt install ./google-chrome-stable_current_amd64.deb -y
                '''
                
                sh 'pip install selenium'
            
                sh 'pip3 install --user selenium==4.9.1 pytest pytest-html-reporter webdriver-manager'
                sh 'pip install pytest-django==4.5.2'
                sh 'pip3 install selenium webdriver_manager'
                sh 'pip install --upgrade webdriver-manager'
                sh 'pip3 install --user selenium webdriver_manager pytest'
                sh 'pip3 show selenium'
                sh 'pip install pytest-html'
                sh ' pip install pytest-html-reporter'
                sh 'python3 -m pytest -v ./base/tests.py --html-report=./report.html'
                

    }
    post {
              success {
                  script{
                  env.SUCCESS = '1'
                  }
              }
              failure {
                  script{
                  env.SUCCESS = '0'
                  }
              }
          }
}
       
       
         stage('Creating HTML Report'){
           when {
                expression {env.SUCCESS == '0' }
            }
            steps {
                sh "echo 'creating report for the pytest tests'"
                publishHTML (target : [allowMissing: false, 
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: '.',
                reportFiles: 'report.html', 
                reportName: 'my django report',  
                reportTitles: 'the django report'])
            }
        } 
        
        
        stage('Email Developers'){
            steps {
            sh 'echo "sending email" '
            emailext body: """The build status is ${currentBuild.currentResult}, on project ${env.JOB_NAME} find test report in this url: ${BUILD_URL}/My_20django/""",
                     subject: """You got a faild build/job ${env.JOB_NAME} - ${env.BUILD_NUMBER} from jenkins""", 
                     to: "nimnishiran@gmail.com, babagim20@gmail.com, shiran_nimni@walla.com"
        
            }
        }
          
        stage('Build and Push Release'){
            when {
                expression {env.SUCCESS == '1' }
            }
            steps {
                sh 'sudo systemctl start docker'
                sh 'systemctl is-active --quiet docker || sudo systemctl start docker'
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME')]) 
                {
                     sh 'echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin'
                }
                
                sh 'sudo systemctl start docker'
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME')]) 
                {
                    sh 'echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin'
                }
                sh 'sudo apt-get update'
                sh 'sudo apt-get install -y libjpeg-dev zlib1g-dev'
                sh 'pip install -r requirements.txt'
                // Starting docker build
                sh "sudo docker build -f /home/shirannimni/ecommerce-django-react/Dockerfile.web -t ${env.DOCKERHUB_REPO}/django-web /home/shirannimni/ecommerce-django-react"
                sh "sudo docker build -f /home/shirannimni/ecommerce-django-react/Dockerfile.db -t ${env.DOCKERHUB_REPO}/django-db /home/shirannimni/ecommerce-django-react"
                script {
                  def buildNumber = env.BUILD_NUMBER
                  def djangoWebImageTag = "${env.DOCKERHUB_REPO}/django-web:${buildNumber}"
                  def djangoDBImageTag = "${env.DOCKERHUB_REPO}/django-db:${buildNumber}"

                  sh "docker tag ${env.DOCKERHUB_REPO}/django-web ${djangoWebImageTag}"
                  sh "docker tag ${env.DOCKERHUB_REPO}/django-db ${djangoDBImageTag}"
                  sh "docker push ${djangoWebImageTag}"
                  sh "docker push ${djangoDBImageTag}"
                }
                
            }
        }
        
       
      
      
    }    
    
}


